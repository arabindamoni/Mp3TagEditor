/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mp3TagEditor;

import com.mpatric.mp3agic.ID3v1;
import com.mpatric.mp3agic.ID3v2;
import com.mpatric.mp3agic.InvalidDataException;
import com.mpatric.mp3agic.Mp3File;
import com.mpatric.mp3agic.NotSupportedException;
import com.mpatric.mp3agic.UnsupportedTagException;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author arabindamoni
 */
public class Mp3TagEditor extends javax.swing.JFrame {

    /**
     * Creates new form Mp3TagEditor
     * 
     */
    
    private Mp3File mp3file;
    private boolean status=false;
    private String newAlbumImage="";
    private String newAlbumImageType="";    
    
    public Mp3TagEditor() {
        initComponents();
        save.setEnabled(false);       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        open_filechooser = new javax.swing.JFileChooser();
        aboutDialog = new javax.swing.JDialog();
        Header = new javax.swing.JLabel();
        artist = new javax.swing.JLabel();
        track = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        year = new javax.swing.JLabel();
        genre = new javax.swing.JLabel();
        comment = new javax.swing.JLabel();
        composer = new javax.swing.JLabel();
        publisher = new javax.swing.JLabel();
        original_artist = new javax.swing.JLabel();
        album_artist = new javax.swing.JLabel();
        copyright = new javax.swing.JLabel();
        url = new javax.swing.JLabel();
        encoder = new javax.swing.JLabel();
        album = new javax.swing.JLabel();
        artistval = new javax.swing.JTextField();
        trackval = new javax.swing.JTextField();
        titleval = new javax.swing.JTextField();
        albumval = new javax.swing.JTextField();
        yearval = new javax.swing.JTextField();
        genreval = new javax.swing.JTextField();
        commetval = new javax.swing.JTextField();
        composerval = new javax.swing.JTextField();
        publisherval = new javax.swing.JTextField();
        original_artist_val = new javax.swing.JTextField();
        album_artist_val = new javax.swing.JTextField();
        copyright_val = new javax.swing.JTextField();
        url_val = new javax.swing.JTextField();
        encoder_val = new javax.swing.JTextField();
        album_image = new javax.swing.JLabel();
        select_image = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        open = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        about = new javax.swing.JMenuItem();

        open_filechooser.setFileHidingEnabled(true);
        open_filechooser.setName("File Chooser"); // NOI18N

        aboutDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        aboutDialog.setTitle("About");
        aboutDialog.setAlwaysOnTop(true);
        aboutDialog.setBackground(new java.awt.Color(204, 255, 204));
        aboutDialog.setBounds(new java.awt.Rectangle(0, 0, 200, 200));
        aboutDialog.setLocationByPlatform(true);

        javax.swing.GroupLayout aboutDialogLayout = new javax.swing.GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        Header.setBackground(new java.awt.Color(255, 204, 153));
        Header.setFont(new java.awt.Font("Chiller", 3, 48)); // NOI18N
        Header.setLabelFor(Header);
        Header.setText("           Mp3 Tag Editor ");
        Header.setBorder(new javax.swing.border.MatteBorder(null));
        Header.setOpaque(true);

        artist.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        artist.setText("Artist");

        track.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        track.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        track.setText("Track");

        title.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        title.setText("Title");

        year.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        year.setText("Year");

        genre.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        genre.setText("Genre");

        comment.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        comment.setText("Comment");

        composer.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        composer.setText("Composer");

        publisher.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        publisher.setText("Publisher");

        original_artist.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        original_artist.setText("Original Artist");

        album_artist.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        album_artist.setText("Album Artist");

        copyright.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        copyright.setText("Copyright");

        url.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        url.setText("URL");

        encoder.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        encoder.setText("Encoder");

        album.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        album.setText("Album");

        titleval.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N

        select_image.setText("Select album image");
        select_image.setEnabled(false);
        select_image.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                select_imageActionPerformed(evt);
            }
        });

        file.setText("File");
        file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileActionPerformed(evt);
            }
        });

        open.setText("open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        file.add(open);

        save.setText("save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        file.add(save);

        jMenuBar1.add(file);

        help.setText("Help");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });

        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });
        help.add(about);

        jMenuBar1.add(help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, 937, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 31, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(publisher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(album_artist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(original_artist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(copyright, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(publisherval)
                                    .addComponent(original_artist_val)
                                    .addComponent(album_artist_val)
                                    .addComponent(copyright_val)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(url, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(album, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(encoder, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(albumval)
                                    .addComponent(url_val)
                                    .addComponent(encoder_val)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(track, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(artist, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(year, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(genre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(composer, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(artistval)
                                    .addComponent(titleval)
                                    .addComponent(yearval)
                                    .addComponent(genreval)
                                    .addComponent(commetval)
                                    .addComponent(composerval)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(trackval, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(album_image, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(138, 138, 138)
                                .addComponent(select_image)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Header)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(track)
                            .addComponent(trackval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(select_image)
                        .addGap(1, 1, 1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(artist, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(artistval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titleval, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(album)
                            .addComponent(albumval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(year)
                            .addComponent(yearval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genreval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(genre))
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comment)
                            .addComponent(commetval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(composer)
                            .addComponent(composerval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(publisher)
                            .addComponent(publisherval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(original_artist)
                            .addComponent(original_artist_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(album_artist)
                            .addComponent(album_artist_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(copyright)
                            .addComponent(copyright_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(url)
                            .addComponent(url_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(encoder)
                            .addComponent(encoder_val, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(album_image, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileActionPerformed
        
        
    }//GEN-LAST:event_fileActionPerformed

    private void openfile(){
        try {
            // TODO add your handling code here:    
            FileNameExtensionFilter filter = new FileNameExtensionFilter("mp3 files","mp3");
            open_filechooser.setFileFilter(filter);
            int returnVal=open_filechooser.showOpenDialog(new JLabel(""));
            if(returnVal != JFileChooser.APPROVE_OPTION) { 
                return;
            }            
            mp3file = new Mp3File(open_filechooser.getSelectedFile().getAbsolutePath());
            if(mp3file.hasId3v1Tag()){
                ID3v1 id3v1Tag=mp3file.getId3v1Tag();
                trackval.setText(id3v1Tag.getTrack());
                artistval.setText(id3v1Tag.getArtist());
                albumval.setText(id3v1Tag.getAlbum());
                yearval.setText(id3v1Tag.getYear());
                genreval.setText(id3v1Tag.getGenreDescription());
                commetval.setText(id3v1Tag.getComment());
            }
            
            if(mp3file.hasId3v2Tag()){
                ID3v2 id3v2Tag = mp3file.getId3v2Tag();
                trackval.setText(id3v2Tag.getTrack());
                artistval.setText(id3v2Tag.getArtist());
                albumval.setText(id3v2Tag.getAlbum());
                album_artist_val.setText(id3v2Tag.getAlbumArtist());
                yearval.setText(id3v2Tag.getYear());
                titleval.setText(id3v2Tag.getTitle());
                genreval.setText(id3v2Tag.getGenreDescription());
                commetval.setText(id3v2Tag.getComment());
                publisherval.setText(id3v2Tag.getPublisher());
                original_artist_val.setText(id3v2Tag.getOriginalArtist());
                copyright_val.setText(id3v2Tag.getCopyright());
                url_val.setText(id3v2Tag.getUrl());
                encoder_val.setText(id3v2Tag.getEncoder());
                composerval.setText(id3v2Tag.getComposer());
                
                 byte[] imageData = id3v2Tag.getAlbumImage();
                 if (imageData != null) {
			String mimeType = id3v2Tag.getAlbumImageMimeType();
                        System.out.print(mimeType);
                        String type=mimeType.substring(mimeType.indexOf("image")+6);
		
			// Write image to file - can determine appropriate file extension from the mime type
			RandomAccessFile file = new RandomAccessFile("album-artwork."+type, "rw");
			file.write(imageData);
			file.close();                                                                           
                       
                        newAlbumImage="album-artwork";
                        newAlbumImageType=type;
                        
                        String iconname="album-artwork."+type;
                        
                        album_image.setText("<html><img src=\"file:"+iconname+"\" width=\"300\" height=\"300\"/></html>");                        
                        
                        select_image.setEnabled(true);
                        save.setEnabled(true);
                        status=true;
                }
                
            }
        } catch (IOException ex) {
            Logger.getLogger(Mp3TagEditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedTagException ex) {
            Logger.getLogger(Mp3TagEditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidDataException ex) {
            Logger.getLogger(Mp3TagEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        // TODO add your handling code here:
        
        if(status==true){
            Object[] options = {"Oh, Yes",
                    "No, thanks",
                    "Cancel it"};
            int n = JOptionPane.showOptionDialog(new JFrame("Save"),"Save file?","Save",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,options[2]);
            if(n==0){
                System.out.println("Yes");
                saveActionPerformed(evt);
            }
            else if(n==1){
               System.out.println("No"); 
               openfile();
            }
            else{
              return;   
            }
        }
        else{
            openfile();
        }
               
    }//GEN-LAST:event_openActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("mp3 files","mp3");
            open_filechooser.setFileFilter(filter);            
            open_filechooser.setSelectedFile(new File("Untitled.mp3"));
            int returnVal=open_filechooser.showSaveDialog(new JLabel("Save"));
            if(returnVal != JFileChooser.APPROVE_OPTION) { 
                return;
            }            
        String filename=open_filechooser.getSelectedFile().getAbsolutePath();
        ID3v2 id3v2Tag = mp3file.getId3v2Tag();
        id3v2Tag.setAlbum(albumval.getText());
        id3v2Tag.setAlbumArtist(album_artist_val.getText());
        id3v2Tag.setComment(commetval.getText());
        id3v2Tag.setComposer(composerval.getText());
        id3v2Tag.setCopyright(copyright_val.getText());
        id3v2Tag.setEncoder(encoder_val.getText());        
         try{
            id3v2Tag.setGenre(Integer.parseInt(genreval.getText()));
         }catch(Exception e){
             System.out.println("Genre shold be integer value");
         }
        id3v2Tag.setOriginalArtist(original_artist.getText());
        id3v2Tag.setPublisher(publisherval.getText());
        id3v2Tag.setTitle(titleval.getText());
        id3v2Tag.setTrack(trackval.getText());
        id3v2Tag.setUrl(url_val.getText());
        id3v2Tag.setYear(yearval.getText());
        id3v2Tag.setArtist(artistval.getText());
        
        try {
            RandomAccessFile rf=new RandomAccessFile(newAlbumImage+"."+newAlbumImageType, "r");
            byte bytes[]=new byte[(int)rf.length()];        
            rf.read(bytes);
            id3v2Tag.setAlbumImage(bytes, "image/"+newAlbumImageType);
            
            mp3file.save(filename+".mp3");
        } catch (IOException ex) {
            Logger.getLogger(Mp3TagEditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotSupportedException ex) {
            Logger.getLogger(Mp3TagEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveActionPerformed

    private void select_imageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_select_imageActionPerformed
        // TODO add your handling code here:
         FileNameExtensionFilter filter = new FileNameExtensionFilter("image files","jpeg","gif","png","jpg","bmp");
            open_filechooser.setFileFilter(filter);
            int returnVal=open_filechooser.showOpenDialog(new JLabel(""));
            if(returnVal != JFileChooser.APPROVE_OPTION) { 
                return;
            }            
        String image=open_filechooser.getSelectedFile().getAbsolutePath();        
        newAlbumImage=image.substring(0,image.indexOf("."));
        newAlbumImageType=image.substring(image.indexOf(".")+1);
        album_image.setText("<html><img src=\"file:"+image+"\" width=\"300\" height=\"300\"/></html>");
        
    }//GEN-LAST:event_select_imageActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_helpActionPerformed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
             
        JOptionPane jo=new JOptionPane();
        jo.showMessageDialog(new JFrame("About"), "<html><b>Developed by : </b><br> Arabinda Moni <i>(arabindamoni@hotmail.com)</i>.<br>For more such tools visit <a href='http://wowcse.blogspot.com'>http://wowcse.blogspot.com</a></html><br>", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mp3TagEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mp3TagEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mp3TagEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mp3TagEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mp3TagEditor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Header;
    private javax.swing.JMenuItem about;
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JLabel album;
    private javax.swing.JLabel album_artist;
    private javax.swing.JTextField album_artist_val;
    private javax.swing.JLabel album_image;
    private javax.swing.JTextField albumval;
    private javax.swing.JLabel artist;
    private javax.swing.JTextField artistval;
    private javax.swing.JLabel comment;
    private javax.swing.JTextField commetval;
    private javax.swing.JLabel composer;
    private javax.swing.JTextField composerval;
    private javax.swing.JLabel copyright;
    private javax.swing.JTextField copyright_val;
    private javax.swing.JLabel encoder;
    private javax.swing.JTextField encoder_val;
    private javax.swing.JMenu file;
    private javax.swing.JLabel genre;
    private javax.swing.JTextField genreval;
    private javax.swing.JMenu help;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem open;
    private javax.swing.JFileChooser open_filechooser;
    private javax.swing.JLabel original_artist;
    private javax.swing.JTextField original_artist_val;
    private javax.swing.JLabel publisher;
    private javax.swing.JTextField publisherval;
    private javax.swing.JMenuItem save;
    private javax.swing.JButton select_image;
    private javax.swing.JLabel title;
    private javax.swing.JTextField titleval;
    private javax.swing.JLabel track;
    private javax.swing.JTextField trackval;
    private javax.swing.JLabel url;
    private javax.swing.JTextField url_val;
    private javax.swing.JLabel year;
    private javax.swing.JTextField yearval;
    // End of variables declaration//GEN-END:variables
}
